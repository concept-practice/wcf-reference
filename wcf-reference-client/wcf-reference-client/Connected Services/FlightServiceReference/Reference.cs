//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wcf_reference_client.FlightServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Flight", Namespace="http://schemas.datacontract.org/2004/07/wcf_service_app.Models")]
    [System.SerializableAttribute()]
    public partial class Flight : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AirplaneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private wcf_reference_client.FlightServiceReference.Airport ArrivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private wcf_reference_client.FlightServiceReference.Airport DepartureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Airplane {
            get {
                return this.AirplaneField;
            }
            set {
                if ((object.ReferenceEquals(this.AirplaneField, value) != true)) {
                    this.AirplaneField = value;
                    this.RaisePropertyChanged("Airplane");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public wcf_reference_client.FlightServiceReference.Airport Arrival {
            get {
                return this.ArrivalField;
            }
            set {
                if ((object.ReferenceEquals(this.ArrivalField, value) != true)) {
                    this.ArrivalField = value;
                    this.RaisePropertyChanged("Arrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public wcf_reference_client.FlightServiceReference.Airport Departure {
            get {
                return this.DepartureField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartureField, value) != true)) {
                    this.DepartureField = value;
                    this.RaisePropertyChanged("Departure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Airport", Namespace="http://schemas.datacontract.org/2004/07/wcf_service_app.Models")]
    [System.SerializableAttribute()]
    public partial class Airport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Iata {
            get {
                return this.IataField;
            }
            set {
                if ((object.ReferenceEquals(this.IataField, value) != true)) {
                    this.IataField = value;
                    this.RaisePropertyChanged("Iata");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FlightServiceReference.IFlightService")]
    public interface IFlightService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlights", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsResponse")]
        wcf_reference_client.FlightServiceReference.Flight[] GetAllFlights();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllFlights", ReplyAction="http://tempuri.org/IFlightService/GetAllFlightsResponse")]
        System.Threading.Tasks.Task<wcf_reference_client.FlightServiceReference.Flight[]> GetAllFlightsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirports", ReplyAction="http://tempuri.org/IFlightService/GetAllAirportsResponse")]
        wcf_reference_client.FlightServiceReference.Airport[] GetAllAirports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFlightService/GetAllAirports", ReplyAction="http://tempuri.org/IFlightService/GetAllAirportsResponse")]
        System.Threading.Tasks.Task<wcf_reference_client.FlightServiceReference.Airport[]> GetAllAirportsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFlightServiceChannel : wcf_reference_client.FlightServiceReference.IFlightService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FlightServiceClient : System.ServiceModel.ClientBase<wcf_reference_client.FlightServiceReference.IFlightService>, wcf_reference_client.FlightServiceReference.IFlightService {
        
        public FlightServiceClient() {
        }
        
        public FlightServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FlightServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public wcf_reference_client.FlightServiceReference.Flight[] GetAllFlights() {
            return base.Channel.GetAllFlights();
        }
        
        public System.Threading.Tasks.Task<wcf_reference_client.FlightServiceReference.Flight[]> GetAllFlightsAsync() {
            return base.Channel.GetAllFlightsAsync();
        }
        
        public wcf_reference_client.FlightServiceReference.Airport[] GetAllAirports() {
            return base.Channel.GetAllAirports();
        }
        
        public System.Threading.Tasks.Task<wcf_reference_client.FlightServiceReference.Airport[]> GetAllAirportsAsync() {
            return base.Channel.GetAllAirportsAsync();
        }
    }
}
